// Generated by CoffeeScript 1.6.3
(function() {
  var me, render, tag, world, xhr;

  tag = function(name, text, attrs) {
    var c, classes, e, element, id, k, p, parts, tagName, v, _i, _j, _k, _len, _len1, _len2;
    parts = (name != null ? name : 'div').split(/(?=[.#])/);
    tagName = "div";
    classes = [];
    id = void 0;
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      p = parts[_i];
      if (p.length) {
        switch (p[0]) {
          case '#':
            if (p.length > 1) {
              id = p.substr(1);
            }
            break;
          case '.':
            if (p.length > 1) {
              classes.push(p.substr(1));
            }
            break;
          default:
            tagName = p;
        }
      }
    }
    element = document.createElement(tagName);
    if (id != null) {
      element.id = id;
    }
    for (_j = 0, _len1 = classes.length; _j < _len1; _j++) {
      c = classes[_j];
      element.classList.add(c);
    }
    if (attrs != null) {
      for (k in attrs) {
        v = attrs[k];
        element.setAttribute(k, v);
      }
    }
    if (typeof text === 'string' || typeof text === 'number') {
      element.textContent = text;
    } else if ((text != null ? text.length : void 0) != null) {
      for (_k = 0, _len2 = text.length; _k < _len2; _k++) {
        e = text[_k];
        element.appendChild(e);
      }
    } else if (text) {
      element.appendChild(text);
    }
    return element;
  };

  xhr = {
    query: function(method, url, data, cb) {
      var req;
      req = new XMLHttpRequest;
      req.timeout = 50000;
      req.onload = function() {
        return cb(null, this.responseText);
      };
      req.onerror = function() {
        return cb('network error');
      };
      req.ontimeout = function() {
        return cb('network timeout');
      };
      req.onabort = function() {
        return cb('network abort');
      };
      req.open(method, url, true);
      req.setRequestHeader('Content-Type', 'application/json');
      return req.send(data);
    },
    get: function(url, cb) {
      return this.query('get', url, void 0, cb);
    },
    post: function(url, data, cb) {
      return this.query('post', url, JSON.stringify(data), cb);
    },
    put: function(url, data, cb) {
      return this.query('put', url, JSON.stringify(data), cb);
    },
    "delete": function(url, cb) {
      return this.query('delete', url, void 0, cb);
    }
  };

  world = null;

  me = 'seph';

  render = function(message) {
    var a, actions, actionsEl, b, desc, p, _i, _len, _results;
    p = world.players[me];
    window.numactions.textContent = "You have " + p.actions + " actions remaining today";
    if (message != null) {
      window.message.textContent = message;
    }
    desc = 'Unknown';
    switch (p.location) {
      case 'intro':
        desc = "Your ship has crash landed on mars. The air is thin and dusty around you. Your head hurts from the landing.";
        actions = ['Get up'];
        break;
      case 'base':
        desc = "You are in a dusty plain.";
        if (world.base.lander) {
          desc += "Your crashed lander is behind you";
        }
        actions = [];
        if (p.actions) {
          actions.push('Explore');
          actions.push('Scavenge wreck');
          actions.push('Create farm');
        }
        break;
      case 'expedition':
        desc = "You are exploring. You are at " + p.explore_location;
        actions = ['Left', 'Right', 'Return to base'];
        break;
      default:
        desc = "Unknown location '" + p.location + "'";
    }
    window.locationdesc.textContent = desc;
    actionsEl = window.actions;
    actionsEl.innerHTML = '';
    if (actions != null) {
      _results = [];
      for (_i = 0, _len = actions.length; _i < _len; _i++) {
        a = actions[_i];
        b = tag('button', a);
        b.onclick = (function(a) {
          return function() {
            return xhr.post('/act', {
              player: me,
              action: a
            }, function(error, data) {
              var _ref;
              if (error) {
                throw error;
              }
              _ref = JSON.parse(data), world = _ref.world, message = _ref.message;
              return render(message);
            });
          };
        })(a);
        _results.push(actionsEl.appendChild(b));
      }
      return _results;
    }
  };

  xhr.get('/world', function(err, _world) {
    world = JSON.parse(_world);
    console.log('world is ', world);
    return render();
  });

}).call(this);
